name: CI/CD Pipeline

on:
  push:
    branches: [main, 'feature/**', 'fix/**']
  pull_request:
    branches: [main]

jobs:
  test-frontend:
    runs-on: ubuntu-latest
    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: cd web/frontend && npm ci
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install backend dependencies
        run: |
          cd web/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Install Playwright browsers
        run: cd web/frontend && npx playwright install --with-deps
      
      - name: Create env files
        run: |
          echo "MONGODB_URI=mongodb://localhost:27017/auto-shorts-test" > .env
          echo "NEXT_PUBLIC_API_URL=http://localhost:8000" > web/frontend/.env.local
      
      - name: Start backend server
        run: cd web/backend && python -m uvicorn app.main:app --host 0.0.0.0 --port 8000 &
        env:
          MONGODB_URI: mongodb://localhost:27017/auto-shorts-test
          ENV: test
      
      - name: Start browser tools server
        run: cd web/frontend && npx browser-tools-server &
      
      - name: Wait for servers to start
        run: |
          echo "Waiting for backend server to start..."
          sleep 5
      
      - name: Run frontend tests
        run: cd web/frontend && npm test
        env:
          CI: true
      
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: web/frontend/playwright-report/
          retention-days: 7

  build-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: web/frontend/package-lock.json
      
      - name: Install dependencies
        run: cd web/frontend && npm ci
      
      - name: Build frontend
        run: cd web/frontend && npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install backend dependencies
        run: |
          cd web/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Validate backend imports
        run: cd web/backend && python -c "import app.main"

  env-validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install backend dependencies
        run: |
          cd web/backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Validate environment variables definition
        run: |
          cd web/backend
          python -c "from app.core.env_validator import REQUIRED_VARS, RECOMMENDED_VARS; print('✓ Environment validation module is properly defined')"
      
      - name: Check .env.example
        run: |
          if grep -q "MONGODB_URI" .env.example && grep -q "NEXT_PUBLIC_API_URL" .env.example; then
            echo "✓ .env.example contains the required variables"
          else
            echo "❌ .env.example is missing required variables"
            exit 1
          fi
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Validate frontend environment validator
        run: |
          cd web/frontend
          if [ -f "src/lib/env-validator.ts" ]; then
            echo "✓ Frontend environment validator exists"
          else
            echo "❌ Frontend environment validator is missing"
            exit 1
          fi

  docker-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Check Docker Compose
        run: |
          if [ -f "docker-compose.yml" ]; then
            echo "✓ docker-compose.yml exists"
          else
            echo "❌ docker-compose.yml is missing"
            exit 1
          fi
      
      - name: Validate Docker Compose file
        run: docker-compose config
      
      - name: Check Frontend Dockerfile
        run: |
          if [ -f "web/frontend/Dockerfile" ]; then
            echo "✓ Frontend Dockerfile exists"
          else
            echo "❌ Frontend Dockerfile is missing"
            exit 1
          fi
      
      - name: Check Backend Dockerfile
        run: |
          if [ -f "web/backend/Dockerfile" ]; then
            echo "✓ Backend Dockerfile exists"
          else
            echo "❌ Backend Dockerfile is missing"
            exit 1
          fi
      
      - name: Build images
        run: docker-compose build 