# Auto Shorts Web App - Cursor Rules

You are an expert in Next.js with React along with Tailwind CSS, FastAPI (Python), MongoDB Atlas, Cloudflare R2, Google Cloud Run and Vercel. With a deep understanding of best practices and performance optimization techniques in these technologies.

## Current Development Focus

The current focus is on implementing a video project workspace with draggable scenes:
1. âœ… Fixed the Not-Found page component error
2. âœ… Enhanced Reddit content extraction to properly handle redirects and fetch media
3. ðŸ”„ Creating the video project workspace with these key components:
   - Project creation flow (title input â†’ workspace)
   - Scene components displaying media and text from Reddit URLs
   - Drag-and-drop functionality for scene reordering
   - Project state management for scene data

## Browser MCP Tool Usage Guidelines

When working with the browser frontend:
1. **Proactive Log Checking**: Check console logs, errors, and network activity at these key moments:
   - At the beginning of each chat session
   - After any code changes
   - Before and after testing frontend functionality
   - When debugging issues
   - Every few minutes during active development

2. **Network Monitoring**:
   - Check network requests when working with API endpoints
   - Examine request/response payloads for debugging
   - Monitor for 4xx/5xx errors in network calls

3. **Console Error Priority**:
   - Treat console errors as high-priority issues
   - Address JS errors before proceeding with new features
   - Check warning messages that may indicate potential issues

4. **Screenshot Strategy**:
   - Take screenshots to verify UI changes
   - Capture the UI state before and after interactions
   - Use screenshots to document the current state for reference

5. **Element Examination**:
   - Check rendered components when implementing or debugging UI
   - Verify CSS classes are applied correctly
   - Examine DOM structure when working with dynamic content

## GitHub MCP Tool Usage Guidelines

When working with GitHub:
1. **Repository Interaction**:
   - Use `mcp__get_file_contents` to examine external repositories for reference code
   - Use `mcp__push_files` for batch commits that belong together
   - Use `mcp__search_code` to find relevant code examples in GitHub

2. **Issue Management**:
   - Check existing issues before creating new ones
   - Reference related issues in commit messages
   - Update issue status when implementing fixes

3. **Pull Request Workflow**:
   - Create feature branches for each major task
   - Include comprehensive descriptions in PRs
   - Link PRs to relevant issues

4. **Best Practices**:
   - Always check for file existence before attempting to update
   - Use meaningful commit messages following the convention
   - Batch related changes into single commits

## Git Commit Conventions

Use the following prefixes for commit messages followed by a colon and a space:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for chore tasks

When determining the commit message prefix, pick the most relevant prefix from the list above.
Use lower case for commit messages.
The commit message should also include a list of the changes made in the commit after the summary line if the changes are not self explanatory.

## End of Chat Commit Summary

At the end of each productive chat where files have been modified, Claude will:

1. Provide a recommended commit message following the standard conventions above
2. List all files that have been changed and need to be committed
3. Provide simple instructions for what needs to be done to commit these changes

### Example Commit Summary Format

```
## Commit Summary

feat: add user authentication component

Files to commit:
- web/frontend/src/components/Auth.js (new)
- web/frontend/src/pages/login.js (modified)

To commit these changes:
1. Click the "+" next to each file in the Source Control panel
2. Enter the commit message above in the message box
3. Click "Commit"
4. If prompted to "Save All & Commit Changes", choose this option
```

## Project Structure & Naming Conventions

### Directories and Files
- Use lowercase with hyphens for directories (e.g., `components/auth-form`, `services/video-processing`)
- Use PascalCase for React component files (e.g., `UserLogin.jsx`)
- Use camelCase for utility files (e.g., `apiClient.js`, `videoUtils.js`)
- Use snake_case for Python files in the backend (e.g., `content_retrieval.py`)

### Component Structure
- Structure React components: imports, component, helpers, exports
- Structure Python modules: imports, constants, functions, classes, exports

## Frontend Conventions (Next.js + React)

### React Components
- Use functional components (not class components)
- Keep components small and focused on a single responsibility
- Separate UI from business logic when possible
- Use descriptive names with auxiliary verbs (e.g., `isLoading`, `hasError`)

### Styling with Tailwind CSS
- Use Tailwind classes directly in components
- Create reusable UI components for common patterns
- Follow desktop-first design with mobile responsiveness
- Use CSS variables for theme colors and consistent spacing
- Leverage Tailwind's responsive prefixes for adaptive layouts

### Video Project Components
- Create `ProjectWorkspace` as a container for the entire project
- Implement `SceneComponent` to display media and text from a URL
- Use `react-beautiful-dnd` for drag-and-drop functionality
- Implement context providers for project state management
- Create utility functions for scene manipulation

### Performance Guidelines
- Optimize images for web delivery
- Design for desktop first, but ensure compatibility with mobile devices
- Implement appropriate loading states and fallbacks
- Use code splitting for larger components where appropriate

## Backend Conventions (FastAPI + Python)

### API Design
- Use RESTful principles for endpoint design
- Implement proper status codes and error responses
- Document all endpoints with OpenAPI specifications
- Use async functions for I/O bound operations

### Python Code Style
- Follow PEP 8 style guidelines
- Use type hints for function parameters and return values
- Keep functions concise and single-purpose
- Document functions with docstrings

### Security Practices
- Never expose API keys in frontend code
- Validate all user inputs
- Implement proper authentication and authorization
- Use environment variables for sensitive configuration

## Media Processing Guidelines

### Content Retrieval
- Implement proper error handling for external APIs
- Cache commonly accessed content when appropriate
- Use appropriate timeouts for external requests
- Handle rate limiting gracefully

### Video Generation
- Optimize for quality-to-file-size ratio
- Implement proper progress tracking for long-running processes
- Handle concurrent processing requests efficiently
- Clean up temporary files after processing

## Recommended Development Strategy

You raise a great point about breaking changes into smaller, more manageable tasks. Here's what I recommend:

### 1. Start with Frontend-Backend Integration Issues

I'd recommend tackling the issues in a specific order that makes the most sense for development flow:

1. **Frontend-Backend Integration First**:
   - Start by properly connecting the form submission to the backend
   - This gives you a working end-to-end flow that you can build upon

2. **Backend Environment Configuration**:
   - Fix the environment variables and mock necessary cloud services
   - This ensures backend services work correctly with frontend requests

3. **Frontend UI Improvements**:
   - Complete styling across pages
   - Implement proper error handling
   - Add responsive design

4. **Backend Feature Implementation**:
   - Complete the video processing pipeline
   - Implement authentication

### 2. One Issue at a Time with Regular Commits

For each task:
1. Create a new branch for the feature/fix
2. Make small, testable changes
3. Test each change
4. Commit with descriptive messages using our prefix conventions
5. Merge back to main when complete

This approach has several benefits:
- Each commit represents a working state
- Easier to track progress
- Simpler to debug if issues arise
- Better code organization

### Example Implementation Plan:

Let's break down our next steps with specific tasks and commit points:

#### Task 1: Connect Form Submission to Backend
```
- Create form validation on frontend
- Implement form submission handler
- Connect to backend API endpoint
- Add loading states
- Implement basic error handling
- COMMIT: "feat: connect create video form to backend API"
```

#### Task 2: Fix Environment Variables
```
- Create proper .env.example files
- Implement environment variable checks
- Update mock storage service
- Test with frontend integration
- COMMIT: "fix: implement proper environment variable handling"
```

#### Task 3: Standardize UI Styling
```
- Create consistent component styling
- Update navigation elements
- Fix responsive design issues
- COMMIT: "style: standardize UI components across pages"
```

## About the File Structure Issue

The file structure in the Git panel might look different because:
1. Some files might be ignored by Git (as per .gitignore)
2. The panel shows changes relative to the last commit
3. Cursor IDE might have a different view than the actual file system

You can always use `git ls-files` to see what files Git is tracking:
