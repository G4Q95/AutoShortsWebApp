services:
  frontend:
    build:
      context: ./web/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./web/frontend:/app
      # Exclude node_modules from volume mounting
      - /app/node_modules
      - /app/.next
    env_file:
      - ./web/frontend/.env
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_BROWSER_API_URL=http://localhost:8000
    depends_on:
      - backend
    command: npm run dev
    networks:
      - app-network

  backend:
    build:
      context: ./web/backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./web/backend:/app
    env_file:
      - ./web/backend/.env
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - DATABASE_NAME=${DATABASE_NAME}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CELERY_BROKER_URL=redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}/0
      - CELERY_RESULT_BACKEND=redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}/0
      - R2_ACCOUNT_ID=${R2_ACCOUNT_ID}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_URL_EXPIRATION=${R2_URL_EXPIRATION:-3600}
      - BASE_URL=${BASE_URL:-http://localhost:3000} # Add BASE_URL for backend tasks
      # Remove unused Cloudflare variables
      # - CLOUDFLARE_ACCOUNT_ID=${CLOUDFLARE_ACCOUNT_ID}
      # - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
      # Worker related (keep commented out for now as they might be revisited)
      # - CF_WORKER_URL=${CF_WORKER_URL}
      # - CF_WORKER_API_TOKEN=${CF_WORKER_API_TOKEN}
      # - USE_WORKER_FOR_DELETION=${USE_WORKER_FOR_DELETION:-false}
      - MOCK_AUDIO=${MOCK_AUDIO:-false} # Pass mock audio setting
    networks:
      - app-network
    command: >
      sh -c "pip install -r requirements.txt &&
             uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload"

  browser-tools:
    image: node:20-slim
    command: sh -c "npm install -g @agentdeskai/browser-tools-server && npx browser-tools-server --command-port 3025"
    ports:
      - "3025:3025"
    volumes:
      - ./screenshots:/screenshots
    networks:
      - app-network

  redis:
    image: redis:alpine
    container_name: redis_cache # Optional: gives the container a fixed name
    restart: always
    ports:
      # - "6379:6379" # Optional: Uncomment to expose Redis to the host machine (usually not needed)
      - "6379" # Expose port only within the Docker network
    volumes:
      - redis_data:/data # Mount a named volume for persistence
    networks:
      - app-network

  celery-worker:
    build:
      context: ./web/backend # Use same context as backend
      dockerfile: Dockerfile.worker # Point to the new Dockerfile
    container_name: celery_worker
    restart: always
    volumes:
      - ./web/backend:/app # Mount the backend code
    env_file:
      - ./web/backend/.env # Use the same env file as backend
    environment: # Explicitly pass variables needed by Celery/tasks
      - MONGODB_URI=${MONGODB_URI}
      - DATABASE_NAME=${DATABASE_NAME}
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CELERY_BROKER_URL=redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}/0
      - CELERY_RESULT_BACKEND=redis://${REDIS_HOST:-redis}:${REDIS_PORT:-6379}/0
      - R2_ACCOUNT_ID=${R2_ACCOUNT_ID}
      - R2_BUCKET_NAME=${R2_BUCKET_NAME}
      - R2_ACCESS_KEY_ID=${R2_ACCESS_KEY_ID} # Ensure R2 keys are passed if needed by tasks
      - R2_SECRET_ACCESS_KEY=${R2_SECRET_ACCESS_KEY} # Ensure R2 keys are passed if needed by tasks
      - MOCK_AUDIO=${MOCK_AUDIO:-false}
    depends_on:
      - redis
      - backend # Optional: Wait for backend if worker imports backend models/code directly on startup
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes: # Add this section at the end if it doesn't exist
  redis_data: # Define the named volume
    driver: local 